{"version":3,"file":"index-dev.umd.js","sources":["../node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/memoize-one/dist/memoize-one.esm.js","../src/timer.js","../src/createListComponent.js","../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../src/VariableSizeList.js","../src/FixedSizeList.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../src/shallowDiffers.js","../src/areEqual.js","../src/shouldComponentUpdate.js"],"sourcesContent":["export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","var shallowEqual = function shallowEqual(newValue, oldValue) {\n  return newValue === oldValue;\n};\n\nvar simpleIsEqual = function simpleIsEqual(newArgs, lastArgs) {\n  return newArgs.length === lastArgs.length && newArgs.every(function (newArg, index) {\n    return shallowEqual(newArg, lastArgs[index]);\n  });\n};\n\nfunction index (resultFn, isEqual) {\n  if (isEqual === void 0) {\n    isEqual = simpleIsEqual;\n  }\n\n  var lastThis;\n  var lastArgs = [];\n  var lastResult;\n  var calledOnce = false;\n\n  var result = function result() {\n    for (var _len = arguments.length, newArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      newArgs[_key] = arguments[_key];\n    }\n\n    if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n      return lastResult;\n    }\n\n    lastResult = resultFn.apply(this, newArgs);\n    calledOnce = true;\n    lastThis = this;\n    lastArgs = newArgs;\n    return lastResult;\n  };\n\n  return result;\n}\n\nexport default index;\n","// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\ntype Layout = 'horizontal' | 'vertical';\n\ntype RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _innerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._innerRef != null) {\n        const innerRef = ((this._innerRef: any): HTMLElement);\n        if (layout === 'horizontal') {\n          innerRef.style.transform = `translate3d(-${initialScrollOffset}px, 0px, 0px)`;\n        } else {\n          innerRef.style.transform = `translate3d(0px, -${initialScrollOffset}px, 0px)`;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._innerRef != null) {\n        const innerRef = ((this._innerRef: any): HTMLElement);\n\n        if (layout === 'horizontal') {\n          innerRef.style.transform = `translate3d(-${scrollOffset}px, 0px, 0px)`;\n        } else {\n          innerRef.style.transform = `translate3d(0px, -${scrollOffset}px, 0px)`;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        innerElementType,\n        innerTagName,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        useIsScrolling,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const isHorizontal = layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            contain: 'layout',\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: this._innerRefSetter,\n          style: {\n            position: 'relative',\n            willChange: 'transform',\n            contain: 'layout',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n        const isHorizontal = layout === 'horizontal';\n\n        const transform = isHorizontal\n          ? `translate3d(${offset}px, 0px, 0px)`\n          : `translate3d(0px, ${offset}px, 0px)`;\n\n        itemStyleCache[index] = style = {\n          transform,\n          height: !isHorizontal ? size : 0,\n          width: isHorizontal ? size : 0,\n          willChange: 'transform',\n          transition: 'none',\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        let scrollOffset = scrollLeft;\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _innerRefSetter = (ref: any): void => {\n      const { innerRef } = this.props;\n\n      this._innerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof innerRef === 'function') {\n        innerRef(ref);\n      } else if (\n        innerRef != null &&\n        typeof innerRef === 'object' &&\n        innerRef.hasOwnProperty('current')\n      ) {\n        innerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  { children, height, layout, innerTagName, outerTagName, width }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    const isHorizontal = layout === 'horizontal';\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedItemSize: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype InstanceProps = {|\n  itemMetadataMap: { [index: number]: ItemMetadata },\n  estimatedItemSize: number,\n  lastMeasuredIndex: number,\n|};\n\nconst getItemMetadata = (\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  const { itemSize } = ((props: any): VariableSizeProps);\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = ((itemSize: any): itemSizeGetter)(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const { itemCount } = props;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getEstimatedTotalSize = (\n  { itemCount }: Props<any>,\n  { itemMetadataMap, estimatedItemSize, lastMeasuredIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredItems = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nconst VariableSizeList = createListComponent({\n  getItemOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata(props, index, instanceProps).offset,\n\n  getItemSize: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.itemMetadataMap[index].size,\n\n  getEstimatedTotalSize,\n\n  getOffsetForIndexAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { height, layout, width } = props;\n\n    const isHorizontal = layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\n\n    // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n\n    const maxOffset = Math.max(\n      0,\n      Math.min(estimatedTotalSize - size, itemMetadata.offset)\n    );\n    const minOffset = Math.max(\n      0,\n      itemMetadata.offset - size + itemMetadata.size\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    props: Props<any>,\n    offset: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem(props, instanceProps, offset),\n\n  getStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { height, itemCount, layout, width } = props;\n\n    const isHorizontal = layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\n    const maxOffset = scrollOffset + size;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const { estimatedItemSize } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredIndex: -1,\n    };\n\n    instance.resetAfterIndex = (\n      index: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instanceProps.lastMeasuredIndex = Math.min(\n        instanceProps.lastMeasuredIndex,\n        index - 1\n      );\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeList;\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst FixedSizeList = createListComponent({\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\n    index * ((itemSize: any): number),\n\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\n    ((itemSize: any): number),\n\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\n    ((itemSize: any): number) * itemCount,\n\n  getOffsetForIndexAndAlignment: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number\n  ): number => {\n    const isHorizontal = layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const lastItemOffset = Math.max(\n      0,\n      itemCount * ((itemSize: any): number) - size\n    );\n    const maxOffset = Math.min(\n      lastItemOffset,\n      index * ((itemSize: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      index * ((itemSize: any): number) - size + ((itemSize: any): number)\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center': {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    { itemCount, itemSize }: Props<any>,\n    offset: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\n    ),\n\n  getStopIndexForStartIndex: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    startIndex: number,\n    scrollOffset: number\n  ): number => {\n    const isHorizontal = layout === 'horizontal';\n    const offset = startIndex * ((itemSize: any): number);\n    const size = (((isHorizontal ? width : height): any): number);\n    const numVisibleItems = Math.ceil(\n      (size + scrollOffset - offset) / ((itemSize: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        itemCount - 1,\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeList;\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// @flow\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nexport default function shallowDiffers(prev: Object, next: Object): boolean {\n  for (let attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (let attribute in next) {\n    if (prev[attribute] !== next[attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\n","// @flow\n\nimport shallowDiffers from './shallowDiffers';\n\n// Custom comparison function for React.memo().\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\nexport default function areEqual(\n  prevProps: Object,\n  nextProps: Object\n): boolean {\n  const { style: prevStyle, ...prevRest } = prevProps;\n  const { style: nextStyle, ...nextRest } = nextProps;\n\n  return (\n    !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest)\n  );\n}\n","// @flow\n\nimport areEqual from './areEqual';\nimport shallowDiffers from './shallowDiffers';\n\n// Custom shouldComponentUpdate for class components.\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\nexport default function shouldComponentUpdate(\n  nextProps: Object,\n  nextState: Object\n): boolean {\n  return (\n    !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState)\n  );\n}\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_assertThisInitialized","self","ReferenceError","simpleIsEqual","newArgs","lastArgs","every","newArg","index","newValue","oldValue","resultFn","isEqual","lastThis","lastResult","calledOnce","_len","Array","_key","now","performance","Date","cancelTimeout","timeoutID","cancelAnimationFrame","id","IS_SCROLLING_DEBOUNCE_INTERVAL","defaultItemKey","data","devWarningsTagName","createListComponent","getItemOffset","getItemSize","getEstimatedTotalSize","getOffsetForIndexAndAlignment","getStartIndexForOffset","getStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","subClass","superClass","props","_instanceProps","_this","_outerRef","_innerRef","_resetIsScrollingTimeoutId","state","instance","isScrolling","scrollDirection","scrollOffset","initialScrollOffset","scrollUpdateWasRequested","_callOnItemsRendered","memoizeOne","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","onItemsRendered","_callOnScroll","onScroll","_getItemStyle","style","itemSize","layout","itemStyleCache","_getItemStyleCache","offset","size","isHorizontal","transform","height","width","willChange","transition","_","__","___","_onScrollHorizontal","event","currentTarget","clientWidth","scrollLeft","scrollWidth","setState","prevState","Math","max","min","_resetIsScrollingDebounced","_onScrollVertical","clientHeight","scrollHeight","scrollTop","_outerRefSetter","ref","outerRef","current","_innerRefSetter","innerRef","callback","delay","start","_resetIsScrolling","requestAnimationFrame","tick","create","constructor","__proto__","getDerivedStateFromProps","nextProps","validateSharedProps","scrollTo","scrollToItem","align","itemCount","componentDidMount","_callPropsCallbacks","componentDidUpdate","componentWillUnmount","render","children","className","innerElementType","innerTagName","itemData","itemKey","outerElementType","outerTagName","useIsScrolling","_getRangeToRender","startIndex","stopIndex","items","push","createElement","undefined","position","WebkitOverflowScrolling","contain","overscanCount","overscanBackward","overscanForward","PureComponent","defaultProps","window","WeakSet","has","add","console","warn","Error","getItemMetadata","instanceProps","itemMetadataMap","lastMeasuredIndex","itemMetadata","findNearestItemBinarySearch","high","low","middle","floor","currentOffset","findNearestItemExponentialSearch","interval","estimatedItemSize","totalSizeOfMeasuredItems","VariableSizeList","estimatedTotalSize","maxOffset","minOffset","round","findNearestItem","resetAfterIndex","shouldForceUpdate","forceUpdate","FixedSizeList","direction","lastItemOffset","middleOffset","ceil","numVisibleItems","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","shallowDiffers","prev","next","attribute","areEqual","prevProps","prevStyle","prevRest","nextStyle","nextRest","nextState"],"mappings":"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"}